import{c as d,d as c,q as l,w as v,g as w,e as I,f as g,s as m,h as A,o as u,i as h}from"./index-Dz2LKTib.js";class y{static async getInvestors(){try{console.log("Interactive Brokers API: Fetching investors...");const e=d(c,"users"),t=l(e,v("role","==","investor")),s=(await w(t)).docs.map(o=>{var n,i;const a=o.data();return{id:o.id,...a,createdAt:((n=a.createdAt)==null?void 0:n.toDate())||new Date,updatedAt:((i=a.updatedAt)==null?void 0:i.toDate())||new Date}});return console.log("Interactive Brokers API: Retrieved",s.length,"investors"),s}catch(e){return console.error("Interactive Brokers API: Get investors error:",e),[]}}static async getInvestorById(e){var t,r;try{console.log("Interactive Brokers API: Fetching investor by ID:",e);const s=I(c,"users",e),o=await g(s);if(o.exists()){const a=o.data(),n={id:o.id,...a,createdAt:((t=a.createdAt)==null?void 0:t.toDate())||new Date,updatedAt:((r=a.updatedAt)==null?void 0:r.toDate())||new Date};return console.log("Interactive Brokers API: Found investor:",n.name),n}return console.log("Interactive Brokers API: Investor not found"),null}catch(s){return console.error("Interactive Brokers API: Get investor by ID error:",s),null}}static async createInvestor(e,t){try{console.log("Interactive Brokers API: Creating investor:",e,t);const r=I(c,"users",e);await m(r,t),console.log("Interactive Brokers API: Investor created successfully")}catch(r){throw console.error("Interactive Brokers API: Create investor error:",r),r}}static async updateInvestor(e,t){try{console.log("Interactive Brokers API: Updating investor:",e,t);const r=I(c,"users",e);await A(r,{...t,updatedAt:new Date}),console.log("Interactive Brokers API: Investor updated successfully")}catch(r){throw console.error("Interactive Brokers API: Update investor error:",r),r}}static async updateInvestorBalance(e,t){try{console.log("Interactive Brokers API: Updating balance for investor:",e,"to:",t);const r=I(c,"users",e);await A(r,{currentBalance:t,updatedAt:new Date}),console.log("Interactive Brokers API: Balance updated successfully")}catch(r){throw console.error("Interactive Brokers API: Update investor balance error:",r),r}}static async getTransactions(e){try{console.log("Interactive Brokers API: Fetching transactions...",e?`for investor ${e}`:"all");const t=d(c,"transactions");let r;if(e){const o=l(t,v("investorId","==",e));r=await w(o)}else{const o=l(t,u("createdAt","desc"));r=await w(o)}const s=r.docs.map(o=>{var n;const a=o.data();return{id:o.id,...a,createdAt:((n=a.createdAt)==null?void 0:n.toDate())||new Date}});return e&&s.sort((o,a)=>a.createdAt.getTime()-o.createdAt.getTime()),console.log("Interactive Brokers API: Retrieved",s.length,"transactions"),s}catch(t){throw console.error("Interactive Brokers API: Get transactions error:",t),t}}static async addTransaction(e){try{console.log("Interactive Brokers API: Adding transaction:",e);const t=d(c,"transactions"),r=await h(t,{...e,createdAt:new Date});return console.log("Interactive Brokers API: Transaction added with ID:",r.id),r.id}catch(t){throw console.error("Interactive Brokers API: Add transaction error:",t),t}}static async getWithdrawalRequests(){try{console.log("Interactive Brokers API: Fetching withdrawal requests...");const e=d(c,"withdrawalRequests"),t=l(e,u("createdAt","desc")),s=(await w(t)).docs.map(o=>{var n,i;const a=o.data();return{id:o.id,...a,createdAt:((n=a.createdAt)==null?void 0:n.toDate())||new Date,processedAt:(i=a.processedAt)==null?void 0:i.toDate()}});return console.log("Interactive Brokers API: Retrieved",s.length,"withdrawal requests"),s}catch(e){return console.error("Interactive Brokers API: Get withdrawal requests error:",e),[]}}static async addWithdrawalRequest(e,t,r){try{console.log("Interactive Brokers API: Adding withdrawal request for:",t,"amount:",r);const s=d(c,"withdrawalRequests"),o=await h(s,{investorId:e,investorName:t,amount:r,date:new Date().toISOString().split("T")[0],status:"Pending",createdAt:new Date});return console.log("Interactive Brokers API: Withdrawal request added with ID:",o.id),o.id}catch(s){throw console.error("Interactive Brokers API: Add withdrawal request error:",s),s}}static async updateWithdrawalRequest(e,t,r,s){try{console.log("Interactive Brokers API: Updating withdrawal request:",e,"status:",t);const o=I(c,"withdrawalRequests",e),a=await g(o);if(!a.exists())throw new Error("Withdrawal request not found");const n=a.data(),i={status:t,processedAt:new Date,processedBy:r};s&&(i.reason=s),await A(o,i),t==="Approved"&&await this.createCommissionRecord(n.investorId,n.investorName,n.amount,e),console.log("Interactive Brokers API: Withdrawal request updated successfully")}catch(o){throw console.error("Interactive Brokers API: Update withdrawal request error:",o),o}}static async createCommissionRecord(e,t,r,s){try{console.log("Interactive Brokers API: Creating commission record for withdrawal:",r);const o=15,a=r*o/100,n=d(c,"commissions");await h(n,{investorId:e,investorName:t,withdrawalAmount:r,commissionRate:o,commissionAmount:a,date:new Date().toISOString().split("T")[0],status:"Earned",createdAt:new Date,withdrawalId:s||null}),console.log("Interactive Brokers API: Commission record created:",a)}catch(o){throw console.error("Interactive Brokers API: Create commission record error:",o),o}}static async getCommissions(){try{console.log("Interactive Brokers API: Fetching commissions...");const e=d(c,"commissions"),t=l(e,u("createdAt","desc")),s=(await w(t)).docs.map(o=>{var n;const a=o.data();return{id:o.id,...a,createdAt:((n=a.createdAt)==null?void 0:n.toDate())||new Date}});return console.log("Interactive Brokers API: Retrieved",s.length,"commission records"),s}catch(e){return console.error("Interactive Brokers API: Get commissions error:",e),[]}}static async addCommissionWithdrawalRequest(e){try{console.log("Interactive Brokers API: Adding commission withdrawal request:",e);const t=d(c,"commissionWithdrawals"),r=await h(t,{...e,createdAt:new Date});return console.log("Interactive Brokers API: Commission withdrawal request added with ID:",r.id),r.id}catch(t){throw console.error("Interactive Brokers API: Add commission withdrawal request error:",t),t}}static async getCommissionWithdrawalRequests(){try{console.log("Interactive Brokers API: Fetching commission withdrawal requests...");const e=d(c,"commissionWithdrawals"),t=l(e,u("createdAt","desc")),s=(await w(t)).docs.map(o=>{var n,i;const a=o.data();return{id:o.id,...a,createdAt:((n=a.createdAt)==null?void 0:n.toDate())||new Date,processedAt:(i=a.processedAt)==null?void 0:i.toDate()}});return console.log("Interactive Brokers API: Retrieved",s.length,"commission withdrawal requests"),s}catch(e){return console.error("Interactive Brokers API: Get commission withdrawal requests error:",e),[]}}static async getPerformanceData(e){try{return console.log("Interactive Brokers API: Getting performance data for period:",e),[]}catch(t){return console.error("Interactive Brokers API: Get performance data error:",t),[]}}static async addCreditToInvestor(e,t,r){try{console.log("Interactive Brokers API: Adding credit to investor:",e,"amount:",t);const s=await this.getInvestorById(e);if(!s)throw new Error("Investor not found");const o=s.currentBalance+t;await this.updateInvestorBalance(e,o),await this.addTransaction({investorId:e,type:"Deposit",amount:t,date:new Date().toISOString().split("T")[0],status:"Completed",description:`Credit added by admin (${r})`}),console.log("Interactive Brokers API: Credit added successfully")}catch(s){throw console.error("Interactive Brokers API: Add credit to investor error:",s),s}}}export{y as F};
